import java.util.*;

public class Tabuleiroo{
  
  int numbers[][];
  boolean backup[][];
  int verifier;
  int column = 2;
  int row = 0;
  int count = 0;

  
  
  public Tabuleiroo(){
    numbers = new int [5][10];
    backup = new boolean [5][10];
    for(int i = 0; i < 10; i++){
      for(int j = 0; j < 5; j++){
        numbers[j][i]=0;
        backup[j][i]=false;
      }
    }
    numbers[2][1]=2;
    numbers[2][2]=2;
  }
    
  
  
  public void printer(){

    for(int i = 0; i < 10; i++){
      for(int j = 0; j < 5; j++){
        System.out.print(" " + numbers[j][i]);
      }
      System.out.println();
    }
  }
  
  
  
  public void blockGenerator(){
    
    
  //  Random block = new Random();
  //  verifier = block.nextInt(5)+1;
    verifier = 2;
    numbers[2][0] = verifier;
  }
  
  
  
  public void gravityTetramino(){  
    int max = 0;
    for(int i = 9; i>=1; i--){
      if(numbers[column][i]==0){
        max = i;
        break;
      }
    }
    
    for(int i = 0; i<max; i++){
      numbers[column][i]=0;
      numbers[column][i+1]=verifier;
      backup[column][i+1]=true;
      backup[column][i]=false;
    }
  }


  
  public void tester(int column, int row, int count){
    count = this.count;
    column = this.column;
    row = this.row;
    
    if(column <= 0 || column+1 >= 5 || row <= 0 || row+1 >= 10 || (backup[column][row]==true) || (numbers[column][row]!=verifier)){
      return;
    }

    else{
      backup[column][row]=true;
      count++;
      tester(column++,row,count);
      tester(column--,row,count);
      tester(column,row++,count);
      tester(column,row--,count);
    }
    this.count = count;
    this.column = column;
    this.row = row;
  }
  

  
  public void crusher(int column, int row){
    column = this.column;
    row = this.row;
    
    if(column <= 0 || column+1 >= 5 || row <= 0 || row+1 >= 10 || (backup[column][row]==false) || (this.count+1<3)){
      return;
    }
    else{
      numbers[column][row]=0;
      backup[column][row]=false;
      crusher(column++,row);
      crusher(column--,row);
      crusher(column,row++);
      crusher(column,row--);
    }    
  }
}
